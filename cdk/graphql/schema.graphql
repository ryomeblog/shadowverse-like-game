schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Card {
  id: String!
  type: String!
  cardname: String!
  cardType: String!
  cost: Int!
  attack: Int
	attackStatus: Boolean
  defense: Int
  description: String!
  effectType: String!
  imageUrl: String
}

type Player {
  id: String!
  type: String!
  username: String!
  exp: Int!
  level: Int!
  ownedCards: [Card]!
  ownedDecks: [Card]!
}

type Deck {
  id: String!
  type: String!
  deckname: String!
  playerId: String!
  cards: [Card]!
}

type MatchHistory {
  id: String!
  type: String!
  player1Id: String!
  player1Deck: [Card!]!
  player2Id: String!
  player2Deck: [Card!]!
  turnCount: Int!
  firstPlayerId: String!
  winnerId: String!
  matchDate: String!
}

type MatchStatus {
  id: String!
  type: String!
  player1Id: String!
  player1Lp: Int!
  player1Cost: Int!
  player1MaxLp: Int!
  player1MaxCost: Int!
  player1field: [Card]!
  player1Hand: [Card]!
  player1Deck: [Card]!
  player1Discard: [Card]!
  player2Id: String!
  player2Lp: Int!
  player2Cost: Int!
  player2MaxLp: Int!
  player2MaxCost: Int!
  player2field: [Card]!
  player2Hand: [Card]!
  player2Deck: [Card]!
  player2Discard: [Card]!
  turnCount: Int!
  firstPlayerId: String!
  winnerId: String
  matchDate: String!
}

type Query {
  getCard(cardId: String!): Card
  getPlayer: Player
  getDeck(deckId: String!): Deck
  getMatchHistory(matchHistoryId: String!): MatchHistory
  getMatchStatus(matchStatusId: String!): MatchStatus
  getAllCard: [Card]
  getAllPlayer: [Player]
  getAllDeck: [Deck]
  getAllMatchHistory: [MatchHistory]
  getAllMatchStatus: [MatchStatus]
}

type Mutation {
  createCard(input: CardInput!): Card
  createPlayer(input: PlayerInput!): Player
  createDeck(input: DeckInput!): Deck
  createMatchHistory(input: MatchHistoryInput!): MatchHistory
  createMatchStatus(input: MatchStatusInput!): MatchStatus
  updateCard(cardId: String!, input: CardInput!): Card
  updatePlayer(input: PlayerInput!): Player
  updateDeck(deckId: String!, input: DeckInput!): Deck
  updateMatchStatus(matchStatusId: String!, input: UpdateMatchStatusInput!): MatchStatus
  deleteCard(cardId: String!): Card
  deletePlayer: Player
  deleteDeck(deckId: String!): Deck
}

input CardInput {
  cardname: String!
  cardType: String!
  cost: Int!
  attack: Int
  defense: Int
  description: String!
  effectType: String!
  imageUrl: String
}

input Cards {
  id: String!
  type: String!
  cardname: String!
  cardType: String!
  cost: Int!
  attack: Int
  defense: Int
  description: String!
  effectType: String!
  imageUrl: String
  attackStatus: Boolean
}

input PlayerInput {
  username: String!
  exp: Int!
  level: Int!
  ownedCards: [Cards]!
  ownedDecks: [Cards]!
}

input DeckInput {
  deckname: String!
  cards: [Cards]!
}

input MatchHistoryInput {
  player1Id: String!
  player1Deck: [Cards]!
  player2Id: String!
  player2Deck: [Cards]!
  turnCount: Int!
  firstPlayerId: String!
  winnerId: String!
  matchDate: String!
}

input MatchStatusInput {
  player1Lp: Int!
  player1Cost: Int!
  player1MaxLp: Int!
  player1MaxCost: Int!
  player1field: [Cards]!
  player1Hand: [Cards]!
  player1Deck: [Cards]!
  player1Discard: [Cards]!
  player2Lp: Int!
  player2Cost: Int!
  player2MaxLp: Int!
  player2MaxCost: Int!
  player2field: [Cards]!
  player2Hand: [Cards]!
  player2Deck: [Cards]!
  player2Discard: [Cards]!
  turnCount: Int!
  winnerId: String
}

input UpdateMatchStatusInput {
  player1Id: String!
  player1Lp: Int!
  player1Cost: Int!
  player1MaxLp: Int!
  player1MaxCost: Int!
  player1field: [Cards]!
  player1Hand: [Cards]!
  player1Deck: [Cards]!
  player1Discard: [Cards]!
  player2Id: String!
  player2Lp: Int!
  player2Cost: Int!
  player2MaxLp: Int!
  player2MaxCost: Int!
  player2field: [Cards]!
  player2Hand: [Cards]!
  player2Deck: [Cards]!
  player2Discard: [Cards]!
  turnCount: Int!
  firstPlayerId: String!
  winnerId: String
}

type Subscription {
  onMatchStatusUpdated(id: String!): MatchStatus 
    @aws_subscribe(mutations: ["updateMatchStatus"])
}